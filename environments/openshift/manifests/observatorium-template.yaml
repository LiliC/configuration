apiVersion: v1
kind: Template
metadata:
  name: observatorium
objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: thanos-querier
    name: thanos-querier
    namespace: ${NAMESPACE}
  spec:
    replicas: ${{THANOS_QUERIER_REPLICAS}}
    selector:
      matchLabels:
        app: thanos-querier
    template:
      metadata:
        labels:
          app: thanos-querier
      spec:
        containers:
        - args:
          - query
          - --query.replica-label=replica
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:9090
          - --store=dnssrv+_grpc._tcp.thanos-store.${NAMESPACE}.svc.cluster.local
          - --store=dnssrv+_grpc._tcp.thanos-receive.${NAMESPACE}.svc.cluster.local
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          name: thanos-querier
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 9090
            name: http
        - args:
          - -provider=openshift
          - -https-address=:9091
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:9090
          - -openshift-service-account=prometheus-telemeter
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}",
            "namespace": "${NAMESPACE}"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get",
            "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          - -skip-auth-regex=^/metrics
          image: ${PROXY_IMAGE}:${PROXY_IMAGE_TAG}
          name: proxy
          ports:
          - containerPort: 9091
            name: https
          volumeMounts:
          - mountPath: /etc/tls/private
            name: secret-querier-tls
            readOnly: false
          - mountPath: /etc/proxy/secrets
            name: secret-querier-proxy
            readOnly: false
        serviceAccount: prometheus-telemeter
        serviceAccountName: prometheus-telemeter
        volumes:
        - name: secret-querier-tls
          secret:
            secretName: querier-tls
        - name: secret-querier-proxy
          secret:
            secretName: querier-proxy
- apiVersion: v1
  data:
    session_secret: ""
  kind: Secret
  metadata:
    labels:
      app: thanos-querier
    name: querier-proxy
    namespace: ${NAMESPACE}
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: querier-tls
    labels:
      app: thanos-querier
    name: thanos-querier
    namespace: ${NAMESPACE}
  spec:
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 9090
      targetPort: 10902
    - name: https
      port: 9091
      targetPort: https
    selector:
      app: thanos-querier
- apiVersion: v1
  data:
    hashrings.json: |-
      [
        {
          "hashring": "thanos-receive-default",
          "tenants": [

          ]
        }
      ]
  kind: ConfigMap
  metadata:
    labels:
      app.kubernetes.io/name: thanos-receive-controller
    name: observatorium-tenants
    namespace: ${NAMESPACE}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/name: thanos-receive-controller
    name: thanos-receive-controller
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: thanos-receive-controller
    template:
      metadata:
        labels:
          app.kubernetes.io/name: thanos-receive-controller
      spec:
        containers:
        - args:
          - --configmap-name=observatorium-tenants
          - --configmap-generated-name=observatorium-tenants-generated
          - --file-name=hashrings.json
          - --namespace=$(NAMESPACE)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: quay.io/observatorium/thanos-receive-controller:master-2019-07-17-1085ff9
          name: thanos-receive-controller
        serviceAccount: thanos-receive-controller
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    name: thanos-receive-controller
    namespace: ${NAMESPACE}
  rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    verbs:
    - list
    - watch
    - get
    - create
    - update
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - list
    - watch
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: thanos-receive-controller
    namespace: ${NAMESPACE}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: thanos-receive-controller
  subjects:
  - kind: ServiceAccount
    name: thanos-receive-controller
    namespace: ${NAMESPACE}
- apiVersion: v1
  kind: Service
  metadata:
    name: thanos-receive-controller
    namespace: ${NAMESPACE}
  spec:
    ports:
    - name: http
      port: 8080
      targetPort: 8080
    selector:
      app.kubernetes.io/name: thanos-receive-controller
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: thanos-receive-controller
    namespace: observatorium
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: thanos-receive
    name: thanos-receive
    namespace: ${NAMESPACE}
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    - name: remote-write
      port: 19291
      targetPort: 19291
    selector:
      app: thanos-receive-default
      controller.receive.thanos.io: thanos-receive-controller
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app: thanos-receive-default
      controller.receive.thanos.io: thanos-receive-controller
    name: thanos-receive-default
    namespace: ${NAMESPACE}
  spec:
    replicas: ${{THANOS_RECEIVE_REPLICAS}}
    selector:
      matchLabels:
        app: thanos-receive-default
        controller.receive.thanos.io: thanos-receive-controller
    serviceName: thanos-receive
    template:
      metadata:
        labels:
          app: thanos-receive-default
          controller.receive.thanos.io: thanos-receive-controller
      spec:
        containers:
        - args:
          - receive
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --remote-write.address=0.0.0.0:19291
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --tsdb.path=/var/thanos/tsdb
          - --labels=replica="$(NAME)"
          - --labels=receive="true"
          - --tsdb.retention=6h
          - --receive.hashrings-file=/var/lib/thanos-receive/hashrings.json
          - --receive.local-endpoint=http://$(NAME).thanos-receive.$(NAMESPACE).svc.cluster.local:19291/api/v1/receive
          env:
          - name: NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          name: thanos-receive-default
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          - containerPort: 19291
            name: remote-write
          volumeMounts:
          - mountPath: /var/thanos/tsdb
            name: data
            readOnly: false
          - mountPath: /var/lib/thanos-receive
            name: observatorium-tenants
        volumes:
        - emptyDir: {}
          name: data
        - configMap:
            name: observatorium-tenants-generated
          name: observatorium-tenants
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: thanos-store
    name: thanos-store
    namespace: ${NAMESPACE}
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    selector:
      app: thanos-store
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app: thanos-store
    name: thanos-store
    namespace: ${NAMESPACE}
  spec:
    replicas: ${{THANOS_STORE_REPLICAS}}
    selector:
      matchLabels:
        app: thanos-store
    serviceName: thanos-store
    template:
      metadata:
        labels:
          app: thanos-store
      spec:
        containers:
        - args:
          - store
          - --data-dir=/var/thanos/store
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --objstore.config=$(OBJSTORE_CONFIG)
          env:
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          name: thanos-store
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          volumeMounts:
          - mountPath: /var/thanos/store
            name: data
            readOnly: false
        volumes:
        - emptyDir: {}
          name: data
- apiVersion: v1
  data:
    conprof.yaml: InNjcmFwZV9jb25maWdzIjoKLSAiam9iX25hbWUiOiAiY29ucHJvZiIKICAia3ViZXJuZXRlc19zZF9jb25maWdzIjoKICAtICJuYW1lc3BhY2VzIjoKICAgICAgIm5hbWVzIjoKICAgICAgLSAiJHtOQU1FU1BBQ0V9IgogICAgInJvbGUiOiAicG9kIgogICJyZWxhYmVsX2NvbmZpZ3MiOgogIC0gImFjdGlvbiI6ICJrZWVwIgogICAgInJlZ2V4IjogImNvbnByb2YuKiIKICAgICJzb3VyY2VfbGFiZWxzIjoKICAgIC0gIl9fbWV0YV9rdWJlcm5ldGVzX3BvZF9uYW1lIgogICJzY3JhcGVfaW50ZXJ2YWwiOiAiMW0iCiAgInNjcmFwZV90aW1lb3V0IjogIjFtIg==
  kind: Secret
  metadata:
    name: conprof-config
    namespace: ${NAMESPACE}
  type: Opaque
- apiVersion: rbac.authorization.k8s.io/v1
  items:
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: conprof-main
      namespace: ${NAMESPACE}
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: conprof-main
    subjects:
    - kind: ServiceAccount
      name: conprof-main
      namespace: ${NAMESPACE}
  kind: RoleBindingList
- apiVersion: rbac.authorization.k8s.io/v1
  items:
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: conprof-main
      namespace: ${NAMESPACE}
    rules:
    - apiGroups:
      - ""
      resources:
      - services
      - endpoints
      - pods
      verbs:
      - get
      - list
      - watch
  kind: RoleList
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: conprof
    name: conprof-main-governing-service
    namespace: ${NAMESPACE}
  spec:
    clusterIP: None
    ports:
    - name: http
      port: 8080
      targetPort: http
    selector:
      app: conprof
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: conprof-main
    namespace: ${NAMESPACE}
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app: conprof
    name: conprof-main
    namespace: ${NAMESPACE}
  spec:
    selector:
      matchLabels:
        app: conprof
    serviceName: conprof-main-governing-service
    template:
      metadata:
        labels:
          app: conprof
      spec:
        containers:
        - args:
          - all
          - --storage.tsdb.path=/conprof
          - --config.file=/etc/conprof/conprof.yaml
          image: quay.io/conprof/conprof:v0.1.0-dev
          name: conprof
          ports:
          - containerPort: 8080
          volumeMounts:
          - mountPath: /conprof
            name: storage
            readOnly: false
          - mountPath: /etc/conprof
            name: config
            readOnly: false
        nodeSelector:
          kubernetes.io/os: linux
        serviceAccountName: conprof-main
        volumes:
        - emptyDir: {}
          name: storage
        - name: config
          secret:
            secretName: conprof-config
- apiVersion: v1
  data:
    rhd.client_id: ""
    rhd.password: ""
    rhd.url: ""
    rhd.username: ""
  kind: Secret
  metadata:
    labels:
      k8s-app: telemeter-server
    name: telemeter-server
    namespace: ${NAMESPACE}
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: telemeter-server-shared
    labels:
      k8s-app: telemeter-server
    name: telemeter-server
    namespace: ${NAMESPACE}
  spec:
    clusterIP: None
    ports:
    - name: external
      port: 8443
      targetPort: external
    - name: internal
      port: 8081
      targetPort: internal
    - name: cluster
      port: 8082
      targetPort: cluster
    selector:
      k8s-app: telemeter-server
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: telemeter-server
    namespace: ${NAMESPACE}
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      endpoint: metrics
      k8s-app: telemeter-server
    name: telemeter-server
    namespace: ${NAMESPACE}
  spec:
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      interval: 30s
      port: internal
      scheme: https
      tlsConfig:
        caFile: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
        serverName: telemeter-server.${NAMESPACE}.svc
    jobLabel: k8s-app
    selector:
      matchLabels:
        k8s-app: telemeter-server
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      endpoint: federate
      k8s-app: telemeter-server
    name: telemeter-server-federate
    namespace: ${NAMESPACE}
  spec:
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      honorLabels: true
      interval: 15s
      params:
        match[]:
        - '{__name__=~".*"}'
      path: /federate
      port: internal
      scheme: https
      tlsConfig:
        caFile: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
        serverName: telemeter-server.${NAMESPACE}.svc
    jobLabel: k8s-app
    selector:
      matchLabels:
        k8s-app: telemeter-server
- apiVersion: apps/v1beta2
  kind: StatefulSet
  metadata:
    name: telemeter-server
    namespace: ${NAMESPACE}
  spec:
    podManagementPolicy: Parallel
    replicas: 10
    selector:
      matchLabels:
        k8s-app: telemeter-server
    serviceName: telemeter-server
    template:
      metadata:
        labels:
          k8s-app: telemeter-server
      spec:
        containers:
        - command:
          - /usr/bin/telemeter-server
          - --join=telemeter-server
          - --name=$(NAME)
          - --listen=0.0.0.0:8443
          - --listen-internal=0.0.0.0:8081
          - --listen-cluster=0.0.0.0:8082
          - --shared-key=/etc/pki/service/tls.key
          - --tls-key=/etc/pki/service/tls.key
          - --tls-crt=/etc/pki/service/tls.crt
          - --internal-tls-key=/etc/pki/service/tls.key
          - --internal-tls-crt=/etc/pki/service/tls.crt
          - --authorize=${AUTHORIZE_URL}
          - --authorize-issuer-url=$(RHD_URL)
          - --authorize-client-id=$(RHD_CLIENT_ID)
          - --authorize-username=$(RHD_USERNAME)
          - --authorize-password=$(RHD_PASSWORD)
          - --whitelist={__name__="up"}
          - --whitelist={__name__="cluster_version"}
          - --whitelist={__name__="cluster_version_available_updates"}
          - --whitelist={__name__="cluster_operator_up"}
          - --whitelist={__name__="cluster_operator_conditions"}
          - --whitelist={__name__="cluster_version_payload"}
          - --whitelist={__name__="cluster_installer"}
          - --whitelist={__name__="instance:etcd_object_counts:sum"}
          - --whitelist={__name__="alerts",alertstate="firing"}
          - --whitelist={__name__="code:apiserver_request_count:rate:sum"}
          - --whitelist={__name__="cluster:capacity_cpu_cores:sum"}
          - --whitelist={__name__="cluster:capacity_memory_bytes:sum"}
          - --whitelist={__name__="cluster:cpu_usage_cores:sum"}
          - --whitelist={__name__="cluster:memory_usage_bytes:sum"}
          - --whitelist={__name__="openshift:cpu_usage_cores:sum"}
          - --whitelist={__name__="openshift:memory_usage_bytes:sum"}
          - --whitelist={__name__="cluster:node_instance_type_count:sum"}
          - --whitelist={__name__="cnv:vmi_status_running:count"}
          - --whitelist={__name__="subscription_sync_total"}
          - --elide-label=prometheus_replica
          - --forward-url=${TELEMETER_FORWARD_URL}
          env:
          - name: NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: RHD_URL
            valueFrom:
              secretKeyRef:
                key: rhd.url
                name: telemeter-server
          - name: RHD_USERNAME
            valueFrom:
              secretKeyRef:
                key: rhd.username
                name: telemeter-server
          - name: RHD_PASSWORD
            valueFrom:
              secretKeyRef:
                key: rhd.password
                name: telemeter-server
          - name: RHD_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: rhd.client_id
                name: telemeter-server
          image: ${IMAGE}:${IMAGE_TAG}
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8443
              scheme: HTTPS
          name: telemeter-server
          ports:
          - containerPort: 8443
            name: external
          - containerPort: 8081
            name: internal
          - containerPort: 8082
            name: cluster
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: 8443
              scheme: HTTPS
          resources:
            limits:
              cpu: ${TELEMETER_SERVER_CPU_LIMIT}
              memory: ${TELEMETER_SERVER_MEMORY_LIMIT}
            requests:
              cpu: ${TELEMETER_SERVER_CPU_REQUEST}
              memory: ${TELEMETER_SERVER_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/pki/service
            name: telemeter-server-tls
            readOnly: false
        serviceAccountName: telemeter-server
        volumes:
        - name: secret-telemeter-server
          secret:
            secretName: telemeter-server
        - name: telemeter-server-tls
          secret:
            secretName: telemeter-server-shared
parameters:
- name: NAMESPACE
  value: telemeter
- name: THANOS_IMAGE
  value: improbable/thanos
- name: THANOS_IMAGE_TAG
  value: v0.6.0-rc.0
- name: PROXY_IMAGE
  value: openshift/oauth-proxy
- name: PROXY_IMAGE_TAG
  value: v1.1.0
- name: THANOS_QUERIER_REPLICAS
  value: "3"
- name: THANOS_STORE_REPLICAS
  value: "5"
- name: THANOS_RECEIVE_REPLICAS
  value: "5"
- name: THANOS_CONFIG_SECRET
  value: thanos-objectstorage
- name: THANOS_S3_SECRET
  value: telemeter-thanos-stage-s3
- name: AUTHORIZE_URL
  value: https://api.openshift.com/api/accounts_mgmt/v1/cluster_registrations
- name: IMAGE
  value: quay.io/openshift/origin-telemeter
- name: IMAGE_TAG
  value: v4.0
- name: TELEMETER_SERVER_CPU_REQUEST
  value: 100m
- name: TELEMETER_SERVER_CPU_LIMIT
  value: "1"
- name: TELEMETER_SERVER_MEMORY_REQUEST
  value: 500Mi
- name: TELEMETER_SERVER_MEMORY_LIMIT
  value: 1Gi
- name: TELEMETER_FORWARD_URL
  value: ""
